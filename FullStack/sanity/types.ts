/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type UserFinal = {
  _id: string;
  _type: "user-final";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  name?: string;
  username?: string;
  email?: string;
  image?: string;
  login_method?: string;
  password?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = UserFinal | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/query.ts
// Variable: USER_BY_AUTH_ID_QUERY
// Query: *[_type == "user-final" && id == $id][0]{        _id,id,name,username,email,image,login_method    }
export type USER_BY_AUTH_ID_QUERYResult = {
  _id: string;
  id: string | null;
  name: string | null;
  username: string | null;
  email: string | null;
  image: string | null;
  login_method: string | null;
} | null;
// Variable: USER_BY_ID_QUERY
// Query: *[_type == "user-final" && _id == $id][0]{        _id,id,name,username,email,image,login_method    }
export type USER_BY_ID_QUERYResult = {
  _id: string;
  id: string | null;
  name: string | null;
  username: string | null;
  email: string | null;
  image: string | null;
  login_method: string | null;
} | null;
// Variable: USER_BY_EMAIL_QUERY
// Query: *[_type == "user-final" && email == $email && login_method == "credentials"][0]{    _id,id,name,username,email,image,login_method,password}
export type USER_BY_EMAIL_QUERYResult = {
  _id: string;
  id: string | null;
  name: string | null;
  username: string | null;
  email: string | null;
  image: string | null;
  login_method: string | null;
  password: string | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == \"user-final\" && id == $id][0]{\n        _id,id,name,username,email,image,login_method\n    }\n    \n": USER_BY_AUTH_ID_QUERYResult;
    "\n    *[_type == \"user-final\" && _id == $id][0]{\n        _id,id,name,username,email,image,login_method\n    }\n    \n": USER_BY_ID_QUERYResult;
    "\n*[_type == \"user-final\" && email == $email && login_method == \"credentials\"][0]{\n    _id,id,name,username,email,image,login_method,password\n}": USER_BY_EMAIL_QUERYResult;
  }
}
